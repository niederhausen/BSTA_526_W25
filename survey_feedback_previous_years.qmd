---
title: "Survey Feedback from Previous Years"
editor: visual
---

# 2024

## Week 1 

### Muddiest points

#### Class logistics

-   Will there be presentation slides in future classes, or is everything embedded into the quarto/html files for all lectures?
    -   *The material will primarily be in quarto/html files and not slides.*
-   Specifics of what topics will be covered exactly. \* *I don't have a list of all the specific functions we will be covering, but you are welcome to peruse the [BSTA 504 webpage from Winter 2023](https://sph-r-programming-2023.netlify.app/) to get more details on topics we will be covering. We will be closely following the same class materials.*
-   Identifying which section of the code we were discussing during the lecture
    -   *Thanks for letting me know. I will try to be clearer in the future, and also jump around less. Please let me know in class if you're not sure where we are at.*
-   The material covered towards the end of the class felt a bit difficult to keep up with. I wish we would have been told to read the materials from Week 1 (or at least skim them) ahead of Day 1, because I quickly lost track of the conversation when shortcuts were used super quickly, for example, or when we jumped from chunks of code to another topic without reflecting on them. I still had 70% of the material down and I wrote great notes during the discussion (which I later filled in with the script that was on the class website), but I think it the beginner/intermediate programming lingo that was used to explain ideas here confused me at times. Thus, I struggled to keep up with discussions around packages / best coding practices, especially when they were not mentioned directly on the script (where I could follow along!).
    -   *Thanks for the feedback. In future years, we will reach out to students before the term to let them know about the readings to prepare for class. Please let us know if there is lingo we are using that you are not familiar with. Learning R and coding is a whole new language!*

#### RStudio

-   I have trouble thinking through where things are automatically downloaded, saved, and running from. I can attend office hours for this!
    -   *Office hours are always a great idea. I do recommend paying close attention to where files are being saved when downloading and preferably specifying their location instead using the default location. Having organized files will make working on complex analyses much easier.*
-   How to read the course material in R. While it made sense in real time it may be difficult when going back over the material.
    -   *Getting used to reading code and navigating the rendered html files takes a while, and is a part of learning R. Figuring out how to take notes for yourself that works for you is also a learning curve. I recommend taking notes in the qmd files as we go through them in class. After class you can summarize and transfer key points to other file formats that you are more used to using. I personally have a folder in my Google drive filled with documents on different R programming topics. It started with one file, and then eventually expanded to multiple files on different topics in an attempt to organize my notes better. Whenever I learn something new (such as an R function or handy R package) that I want to keep for future reference, I add to them with links to relevant webpages and/or filenames and locations of where I used them.*

#### Code

-   What does the pacman package do? I have it installed but I'm not sure what it is actually used for.
    -   *I didn't go into `pacman` in Day 1. The `p_load()` function from the `pacman` package (usually run as `pacman::p_load()`) lets you load many packages at once without separately using the `library()` function for each individually.*
    -   *An added bonus is that by default it will install packages you don't already have, unless you specify `install = FALSE`.*
    -   *Another option is to set `update = TRUE` so that it will automatically update packages. I do not use this option though since sometimes updating packages causes conflicts with other packages or older code.*
    -   *You can read more about the different options in the [documentation](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load). This [Medium article](https://medium.com/r-tutorials/an-alternative-to-loading-packages-in-r-using-pacman-p-load-6037903a301a) also has some tips on using `pacman`.*
-   The part on when to load in packages once they've already been loaded in - like for example would it be good to put that as a step in our homework 1 .qmd at the top? Or not necessary since they're already loaded in to R Studio from the work we did in class yesterday? What would happen if we try to load them in and they were already loaded in, would the .qmd file not render and show an error?
    -   *I always load my packages at the very top of the .qmd files, usually in the first code chunk (with the setup label). If you still have a previous R session open, then yes you don't need to load the packages again to run code within RStudio. However, when a file is rendered it starts with an empty workspace, which is why our qmd file must include code that loads the packages (either using `library()` or `pacman::p_load()`. We don't have to load packages at the beginning of the file, just before we have code that depends on the packages being used.*
-   I didn't understand the part where we talked about num, char, logical combinations (line 503).
    -   *The content of the objects `char_logical`, `num_char`, `num_logical`, and `tricky` were designed specifically to be confusing and thus make us aware of how R will decide to assign the data type when a vector is a mix of data types. Some key takeaways are below. Let me know if you sitll have questions about this.*
        -   *Numbers and logical/boolean (`TRUE`, `FALSE`) do not have double quotes around them, but character strings do. If you add double quotes to a number or logical, then R will treat it as a character string.*
        -   *If a vector is a mix of numbers and character strings, then the data type of the vector is character.*
        -   *If a vector is a mix of numbers and logical, then the data type of the vector is numeric and the logical value is converted to a numeric value (`TRUE`=1, `FALSE`=0).*
        -   *If a vector is a mix of character strings and logical, then the data type of the vector is character and the logical value is converted to a character string and no longer operates as a logical (i.e. no longer equal to 1 or 0).*
-   Lines 614-619, confused what the ratio means there. Could you go over the correct code (or options of the correct code) for challenge 5?
    -   *The code `1:4` or `6:9` creates sequences of integers starting with the first specified digit and ending at the last specified digit. For example, `1:4` is the vector with the digits 1 2 3 4. You can also create decreasing sequences by making the first number the bigger one. For example, `9:7` is the vector 9 8 7.*
    -   *Challenge 5:*
        -   `more_heights_complete <- na.omit(more_heights)`
        -   `median(more_heights_complete)`
        -   *You could also get the median of `more_heights` without first removing the missing values with `median(more_heights, na.rm = TRUE)`.*
-   how to count the TRUE values in a logical vector
    -   `TRUE` is equal to 1 in R (and `FALSE` is equal to 0), and the function `sum()` adds up the values in a vector. Thus, `sum(TRUE, FALSE, TRUE)` is equal to 2. Similarly, `sum(TRUE, FALSE, 5)` is equal to 6.
    -   The way I used it in class though is by counting how many values in the vector `z` (which was 7 9 11 13) are equal to 9. To do that I used the code `sum(z == 9)`. Breaking that down, the code inside the parentheses `z == 9` is equal to `FALSE TRUE FALSE FALSE` since the `==` means "equals to" in R.
    -   You can read up more on boolean and logical operators at the [R-bloggers post](https://www.r-bloggers.com/2021/09/r-booleans-comparison-and-logical-operators/).

### Clearest Points

*Thank you for the feedback!*

#### Class logistics

-   Syllabus/course structure
-   The syllabus review.
-   Overall expectations and course flow
-   Introduction to the class (first half of the class); conversation around syllabus; and the Quarto introduction

#### Quarto

-   How to create and edit a Quarto document in RStudio.
-   The differences between quarto and markdown
-   rmarkdown is no more, quarto it is!

#### Coding

-   Having code missing and fixing it in front of the class was helpful in troubleshooting.
-   Just running through all the commands was very clear and easy to follow
-   Basic R set up for quarto and introduction to R objects, vectors, etc.
-   Introduction, functions, and explanations was the clearest for me.
-   Classification of the objects in logical, character, and numeric
-   Not necessarily a point, but I really liked when we were encouraged to use the shortcut keys for various commands on R and other little things like switching code between console vs inline , I have used R before for a class briefly but I never knew all these ways by which I can save time and be efficient while writing a code.

## Week 2

### Muddiest points

-   When discussing untidy data, the difference between long data and wide data was unclear.
    -   *We'll be discussing the difference between long and wide data in more detail later in the course when we convert a dataset between the two. For now, you can take a look at an [example I created for our BERD R workshops](https://jminnier-berd-r-courses.netlify.app/02-data-wrangling-tidyverse/02_data_wrangling_slides_part2.html#27). The wide data in that example are not "tidy" since each cell contains two pieces of information: both the SBP and the visit number. In contrast, the long data have a separate column indicating which visit number the data in a given row are from.*
-   for the "summary()" function, is there a way to summarize all but one variable in a dataset?
    -   *Yes! I sometimes restrict a dataset to a couple of variables for which I want to see the summary. I usually use the `select()` function for this, which we will be covering later in the course. For now, you can take a look at some [select() examples from the BERD R workshops](https://jminnier-berd-r-courses.netlify.app/02-data-wrangling-tidyverse/02_data_wrangling_slides_part1.html#29) (see slides 29-32).*
-   Differences between a tibble and a data.frame
    -   *I'm not surprised to see this show up as a muddiest point! Depending on your level of experience with R, at this point in the class some of the differences are difficult to explain since we haven't done much coding yet. The [tibble vignette](https://cran.r-project.org/web/packages/tibble/vignettes/tibble.html) lists some of the differences though if you are interested. For our purposes, they are almost the same thing. When some differences come up later in the course, I will point them out.*

### Clearest Points

*Thanks for the feedback!*

-   I enjoyed going through the code and viewing the functions. I haven't really used `skimr` before and that was nice to see.
    -   *I like using `skmir`, but have recently been using `get_summary_stats()` from the `rstatix` package when teaching. It is only for numeric variables though. See a [`get_summary_stats()` example from my BSTA 511 class](https://niederhausen.github.io/BSTA_511_F23/slides/Day03_bsta511.html#/get_summary_stats-from-rstatix-package).*
-   Loading data.
-   How to load data into R was clearest.
    -   *Good to know that loading data was clear. This part can be tricky sometimes!*
-   ggplot
    -   *Hopefully this will still be clear when we cover more advanced options in `ggplot`!*

## Week 3

### Muddiest points

#### here package

The here package takes a bit to explaining, but, compared to the old way of doing things, it is a real life saver. The issue in the past had to do with relative file paths, especially with `.qmd` files that are saved in sub-folders. The `.qmd` file recognizes where it is saved as the root file path, which is okay with a one-off `.qmd` file. But when working in projects (recommended) and striving for reproducible R code (highly recommended), the `here` package save a lot of headache.

For further reading: + [Why should I use the here package when I'm already using projects?](https://malco.io/articles/2018-11-05-why-should-i-use-the-here-package-when-i-m-already-using-projects) by Malcolm Barrett. + [how to use the `here` package](http://jenrichmond.rbind.io/post/how-to-use-the-here-package/) by Jenny Richmond. + [here package vignette](https://here.r-lib.org/articles/here.html) + [Using here with rmarkdown](https://cran.r-project.org/web/packages/here/vignettes/rmarkdown.html)

Project-oriented workflows are recommended. Here package solves some old headaches. It gets easier with practice.

##### Question about using here

> ... how \[here\] can be used in certain instances where one may not remember if they switched to a new qmd file? In that case, would you suggest to use the "here" command each time you work on a project where there's a chance that you'll switch between qmd files and would like to use the same data file throughout? Is there any other way to better use this function or tips on how you deal with it?

There is a difference between working interactively in RStudio where data are loaded to the Environment. In this case, loading a data set once means that it can be used in any other code while working in the environment.

Issues will com up when you go to render a `.qmd` that doesn't have the data loaded within that `.qmd`. It won't look to the environment for the data; it looks to the filepath that you specify in the `.qmd`. Best practice is to *write the code* to load the data in each `.qmd` or `.R` script so that R knows where to look for the data that you want it to operate on / analyze.

#### The ! function. It seems like sometimes we use ! and sometimes we use -. Are they interchangeable, or each with different types of functions?

-   `!` -- the exclamation point can be read as "not" it is primarily used in logical statements
-   `-` -- the minus sign can be used in more instances
    -   to do actual arithmetic (i.e. subtraction)
    -   to indicate a negative number
    -   with `dplyr::select()` to remove or not select a column, or exclusion

```{r}

# Subtraction
5 - 3

# Negation
x <- 10
-x

# Selection/exclusion
library(dplyr)
select(starwars, -height) |> dplyr::glimpse()

```

#### Using the fill command

We didn't cover it in the lecture notes, but then it appeared in the example. I suggest to read/work through the [fill vignette](https://tidyr.tidyverse.org/reference/fill.html); the examples there are good ones to show what the function does. Then look back a the `smoke_messy` data set in Part 3 and think about why this command would be useful to clean up the data and for *fill*ing in missing values.

#### Loading data into R

It gets easier and hopefully you get to see more example in the notes and practice with the homework. [This tutorial](http://www.sthda.com/english/wiki/importing-data-into-r) is pretty good. So is the [readxl vignette](https://readxl.tidyverse.org/) and the [readr vignette](https://readr.tidyverse.org/).

#### Reasonable width, height, and dpi values when using ggsave

This takes some trial and error and depends on the purpose. For draft figures, dpi = 70 might be okay, but a journal might require dpi above 300 for publication. In Quarto, rendering an html, the figure defaults are 7x5 inches ([Link](https://quarto.org/docs/computations/execution-options.html)). We talked about in class how you can use the plot panes to size your figures by trial and error.

#### The `tidyselect` section

There were pretty good resources in the notes

-   See some more examples in [this slide](https://jminnier-berd-r-courses.netlify.app/02-data-wrangling-tidyverse/02_data_wrangling_slides_part1.html#32)

-   For more info and learning about tidyselect, please run this code in your console:

```{r}
#| eval: false
# install remotes package
install.packages("remotes")
# use remotes to install this package from github
remotes::install_github("laderast/tidyowl")

# load tidyowl package
library(tidyowl)

# interactive tutorial
tidyowl::learn_tidyselect()
```

[Here is also a link](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html) with a list of the selectors and links to each one. For example, there is a link to [`starts_with`](https://tidyselect.r-lib.org/reference/starts_with.html) and a bunch of examples.


## Week 4



```{r}
#| label: setup

# Load packages
pacman::p_load(tidyverse, 
               readxl, 
               janitor,
               here)
```

```{r}
#| label: load the data

# Load data
smoke_complete <- readxl::read_excel(here("data", "smoke_complete.xlsx"), 
                                     sheet = 1, 
                                     na = "NA")
                                     
# dplyr::glimpse(smoke_complete)
```


### Keyboard shortcut for the pipe (`%>%` or `|>`)

In office hours, someone didn't know about this fact and wanted to make sure everyone knows about it.

::: {.callout-tip}

#### Important keyboard shortcut

In RStudio the keyboard shortcut for the pipe operator `%>%` (or native pipe `|>`) is `Ctrl + Shift + M` (Windows) or `Cmd + Shift + M` (Mac).

Note: `Ctrl + Shift + M` also works on a Mac.

:::


### The difference between NA value and 0

#### NA (Not Available)

+ `NA` is a special value in R that represents missing or undefined data.
+ `0` is a numeric value representing the number zero. It is a valid and well-defined numerical value in R. 
+ It's important to handle `NA` values appropriately in data analysis and to consider their impact on calculations, as operations involving `NA` may result in `NA`.

```{r}
NA + 5  # The result is NA

0 + 5  # The results is 5


x <- c(1, 2, NA, 4)

sum(x)  # The result is NA

# Using the argument na.rm = TRUE, means to ignore the NAs
sum(x, na.rm = TRUE) # The results is 7


x <- c(1, 2, 0, 4)

sum(x) # The result is 7


```


### `across()` and it's usage

The biggest advantage that across brings is the ability to perform the same data manipulation task to multiple columns.

Below the values in three columns are all set to the mean value using the `mean()`. I had to write out the function and the variable names three times.  

```{r}
smoke_complete |> 
  mutate(days_to_death = mean(days_to_death, na.rm = TRUE), 
         days_to_birth = mean(days_to_birth, na.rm = TRUE), 
         days_to_last_follow_up = mean(days_to_last_follow_up, na.rm = TRUE)) |> 
  dplyr::glimpse()
```

The same thing is accomplished using `across()` but we only have to call the `mean()` function once.

```{r}
smoke_complete |> 
  mutate(dplyr::across(.cols = c(days_to_death, 
                                 days_to_birth, 
                                 days_to_last_follow_up), 
                       .fns = ~ mean(.x, na.rm = TRUE))) |> 
  dplyr::glimpse()


```


#### Links to check out

+ [`across()` vignette](https://dplyr.tidyverse.org/reference/across.html)
+ [Why I love dplyr's across](https://willhipson.netlify.app/post/dplyr_across/dplyr_across/)


### `~` and `.x`

We've seen the `~` and `.x` used with `dplyr::across()`. We will see them again later when we get to the package `purrr`.

In the tidyverse, `~` and `.x` are used to create what they call *lambda* functions which are part of the `purrr` syntax. We have not talked about functions yet, but `purrr` package and the `dplyr::across()` function allow you to specify functions to apply in a few different ways:

1. **A named function, e.g. `mean`.**

```{r}
smoke_complete |> 
  mutate(dplyr::across(.cols = c(days_to_death, 
                                 days_to_birth, 
                                 days_to_last_follow_up), 
                       .fns = mean)) |> 
  dplyr::glimpse()

```

::: {.callout-note}
Above, just using the function name, we are not able to provide the additional argument `na.rm = TRUE` to the `mean()` function, so the columns are now all `NA` values because there were missing (`NA`) values in those columns.
:::

2. **An anonymous function, e.g. `\(x) x + 1` or `function(x) x + 1`.**

This has not been covered yet. R lets you specify your own functions and there are two basic ways to do it.

```{r}
smoke_complete |> 
  mutate(dplyr::across(.cols = c(days_to_death, 
                                 days_to_birth, 
                                 days_to_last_follow_up), 
                       .fns = \(x) mean(x, na.rm = TRUE))) |> 
  dplyr::glimpse()
```

or 

```{r}
smoke_complete |> 
  mutate(dplyr::across(.cols = c(days_to_death, 
                                 days_to_birth, 
                                 days_to_last_follow_up), 
                       .fns = function(x) mean(x, na.rm = TRUE))) |> 
  dplyr::glimpse()
```

::: {.callout-note}
Now we are able to use the additional argument `na.rm = TRUE` and the columns are now the means of the valid values in those columns.
:::

3. **A purrr-style lambda function, e.g. `~ mean(.x, na.rm = TRUE)`**

We use `~` to indicate that we are supplying a lambda function and we use `.x` as a placeholder for the argument within our lambda function to indicate where to use the variable. 

```{r}
smoke_complete |> 
  mutate(dplyr::across(.cols = c(days_to_death, 
                                 days_to_birth, 
                                 days_to_last_follow_up), 
                       .fns = ~ mean(.x, na.rm = TRUE))) |> 
  dplyr::glimpse()
```


#### Links to check out

Some of these are `purrr` focused which we have not covered yet. Others use `dplyr::across()` withing the `dplyr::summarize()` function which we will be covering soon

+ [Meaning of tilde and dot notation in dplyr](https://stackoverflow.com/questions/68249625/meaning-of-tilde-and-dot-notation-in-dplyr)
+ [What is the meaning of '~' and '.' inside the function map? ](https://stackoverflow.com/questions/70665707/what-is-the-meaning-of-and-inside-the-function-map)
+ [`across()` vignette](https://dplyr.tidyverse.org/reference/across.html)
+ [Why I love dplyr's across](https://willhipson.netlify.app/post/dplyr_across/dplyr_across/)


### Exceptions where we have seen the `~` used

In class, we have seen three instances where the `~` is used that is not for a lambda function.

#### `case_when`

```{r}
smoke_complete |> 
  mutate(cigarettes_category = case_when(
      cigarettes_per_day < 6 ~ "0-5", 
      cigarettes_per_day >= 6 ~ "6+"
    )) |> 
  mutate(cigarettes_category = factor(cigarettes_category)) |> 
  janitor::tabyl(cigarettes_category)
```

#### `facet_wrap`

```{r}
ggplot(data = smoke_complete, 
       aes(x = age_at_diagnosis, 
           y = cigarettes_per_day)) + 
  geom_point() + 
  facet_wrap(~ disease)
```

Per the [`facet_wrap` vignettte](https://ggplot2.tidyverse.org/reference/facet_wrap.html):

> For compatibility with the classic interface, can also be a formula or character vector. Use either a one sided formula, `~a + b`, or a character vector, `c("a", "b")`.

Here it is being used to specify a formula.

Though per the vignette, the `vars()` function is preferred syntax:

```{r}
ggplot(data = smoke_complete, 
       aes(x = age_at_diagnosis, 
           y = cigarettes_per_day)) + 
  geom_point() + 
  facet_wrap(ggplot2::vars(disease))
```

#### `facet_grid`

```{r}
ggplot(data = smoke_complete, 
       aes(x = age_at_diagnosis, 
           y = cigarettes_per_day)) + 
  geom_point() + 
  facet_grid(disease ~ vital_status)
```

Per the [`facet_grid` vignettte](https://ggplot2.tidyverse.org/reference/facet_grid.html):

> For compatibility with the classic interface, rows can also be a formula with the rows (of the tabular display) on the LHS and the columns (of the tabular display) on the RHS; the dot in the formula is used to indicate there should be no faceting on this dimension (either row or column).

Again, it is being used to specify a formula.

Though per the vignette, the `ggplot2::vars()` function with the arguments `rows` and `cols` seems to be preferred:

```{r}
ggplot(data = smoke_complete, 
       aes(x = age_at_diagnosis, 
           y = cigarettes_per_day)) + 
  geom_point() + 
  facet_grid(rows = ggplot2::vars(disease), 
             cols = ggplot2::vars(vital_status))
```


Note: `dplyr::vars()` and `dplyr::ggplot2()` are the same function in different packages and can be used interchangeably.


### `case_when` vs. `if_else`

In dplyr, both `if_else()` and `case_when()` are used for conditional transformations, but they have different use cases and behaviors.

1. `if_else` function

+ `if_else()` is designed for simple vectorized conditions and is particularly useful when you have a *binary* condition (i.e., two possible outcomes).
+ It evaluates a condition for each element of a vector and returns one of two values based on whether the condition is `TRUE` or `FALSE`.

```{r}
smoke_complete |> 
  mutate(cigarettes_category = dplyr::if_else(cigarettes_per_day < 6, "0-5", "6+")) |> 
  mutate(cigarettes_category = factor(cigarettes_category)) |> 
  janitor::tabyl(cigarettes_category)
```

In this example, the column `cigarettes_category` is assigned the value "0-5" if `cigarettes_per_day` is less than 6 and "6+" otherwise.

2. `case_when()` function

+ `case_when()` is more versatile and is suitable for handling multiple conditions with multiple possible outcomes. It is essentially a vectorized form of a `switch` or `if_else` chain.
+ It allows you to specify multiple conditions and their corresponding values.

```{r}
smoke_complete |> 
  mutate(cigarettes_category = case_when(
      cigarettes_per_day < 2 ~ "0 to 2", 
      cigarettes_per_day < 4 ~ "2 to 4", 
      cigarettes_per_day < 6 ~ "4 to 6", 
      cigarettes_per_day >= 6 ~ "6+"
    )) |> 
  mutate(cigarettes_category = factor(cigarettes_category)) |> 
  janitor::tabyl(cigarettes_category)
```

In this example, the column `cigarettes_category` is assigned the value "0 to 2" if `cigarettes_per_day` is less than 2, 
"2 to 4" if less than 4 (but greater than 2), "4 to 6" if less than 6 (but greater than 4), and "6+" otherwise.


Use `if_else()` when you have a simple binary condition, and use `case_when()` when you need to handle multiple conditions with different outcomes. `case_when()` is more flexible and expressive when dealing with complex conditional transformations.


### The difference between a theme and and a palette. 


In `ggplot2`, a theme and a palette serve different purposes and are used in different contexts. In summary, a theme controls the overall appearance of the plot, while a palette is specifically related to the colors used to represent different groups or levels within the data. Both themes and palettes contribute to visual appeal and readability of your plot.

1. **Theme:**

- A theme in `ggplot2` refers to the overall visual appearance of the plot. It includes elements such as fonts, colors, grid lines, background, and other visual attributes that define the look and feel of the entire plot.
- Themes are set using functions like `theme_minimal()`, `theme_classic()`, or custom themes created with the `theme()` function. Themes control the global appearance of the plot.

```{r}
library(ggplot2)

# Example using theme_minimal()
ggplot(data = smoke_complete, 
       aes(x = age_at_diagnosis, 
           y = cigarettes_per_day)) + 
  geom_point() + 
  theme_minimal()


```

2. **Palette:**

- A palette, on the other hand, refers to a set of colors used to represent different levels or categories in the data. It is particularly relevant when working with categorical or discrete data where you want to distinguish between different groups.
- Palettes are set using functions like `scale_fill_manual()` or `scale_color_manual()`. You can specify a vector of colors or use pre-defined palettes from packages like RColorBrewer or viridis (we looked at the viridis package in class).

```{r}
# Example using a color palette
ggplot(data = smoke_complete, 
       aes(x = age_at_diagnosis, 
           y = cigarettes_per_day, 
           color = disease)) + 
  geom_point() +
  scale_color_manual(values = c("red", 
                                "blue", 
                                "green"))
```

### Be careful what you pipe to and from

An error came up where a data frame was being piped to a function that did not accept a data frame as an argument (it accepted a vector)

```{r}
#| error: true

# starwars data frame was loaded earlier with the ggplot2 package

starwars |>  
  dplyr::n_distinct(species) 
```

+ `starwars` is a data frame.
+ `dplyr::n_distinct()` only accepts a vector as an argument (check the help `?dplyr::n_distinct`)

So we need to pipe a vector to the `dplyr::n_distinct()` function:

```{r}
starwars |> 
  dplyr::select(species) |> 
  dplyr::n_distinct() 
```

`dplyr::select()` accepts a data frame as its first argument and it return a vector (see the help `?dplyr::select`) which we can then pipe to `dplyr::n_distinct()`.

The `%>%` or `|>` takes the output of the expression on its left and passes it as the first argument to the function on its right. The class / type of output on the left needs to agree or be acceptable as the first argument to the function on the right.


### Other muddy points

+ Remembering applicable functions. Troubleshooting.

> This gets better with experience. You are all still very new to R so be patient with yourself. 

+ How to organize all of the material to understand the structure of how the R language works, rather than to keep track of all of the commands in an anecdotal way.

> Again, I think that this gets better with experience. Though the R language, being open source, a lot of syntax is package dependent. So you need to be careful that some of the syntax we use with `dplyr` and the `tidyverse` will be different in base R or in other packages. This is something that comes with open source software (compared to Stata or SAS). The good news is that learning to use packages sets you up to better learn newer (to you) packages down the road.



## Week 5

### `case_when()` vs `ifelse()`

_The difference between case_when and ifelse_

* `ifelse()` is the base R version of tidyverse's `case_when()`
* I prefer using `case_when()` since it's easier to follow the logic.
* `case_when()` is especially useful when there are more than two logical conditions being used.



The example below creates a binary variable for bill length (long vs not long) using both `case_when()` and `ifelse()` as a comparison.

* Compare the crosstabs of the two variables!

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(janitor)
library(palmerpenguins)

summary(penguins)

penguins <- penguins %>% 
  mutate(
    long_bill1 = case_when(
      bill_length_mm >= 45 ~ "long",
      bill_length_mm < 45 ~ "not long",
    ),
    long_bill2 = ifelse(bill_length_mm >= 45, "long", "not long")
  )

penguins %>% tabyl(long_bill1, long_bill2) %>% 
  adorn_title()

```

Below is an example using `case_when()` to create a categorical variable with 3 groups:

```{r}
penguins <- penguins %>% 
  mutate(
    long_bill3 = case_when(
      bill_length_mm >= 50 ~ "long",
      bill_length_mm <= 40 ~ "short",
      TRUE ~ "medium"
    ))

penguins %>% tabyl(long_bill3, long_bill1) %>% 
  adorn_title()
```

* Creating a categorical variable with 3 groups can be done with `ifelse()`, but it's harder to follow the logic:

```{r}
penguins <- penguins %>% 
  mutate(
    long_bill4 = ifelse(
      bill_length_mm >= 50, "long",
      ifelse(bill_length_mm <= 40, "short", "medium")
      ))

penguins %>% tabyl(long_bill3, long_bill4) %>% 
  adorn_title()
```


### `separate()`

_Different ways of using the function separate, it was a bit unclear that when to use one or the other or examples of my research data where it'll be most relevant to use._

* Choosing the "best" way of using `separate()` is overwhelming at first. 
* I recommend starting with the simplest use case with a string being specified in `sep = " "`:

>`separate(data, col, into, sep = " ")`

* Which of the various versions we showed to use depends on how the data being separated are structured. 
* Most of the time I have a simple character, such as a space (`sep = " "`) or a comma (`sep = ","`) that I want to separate by.
* If the data are structured in a more complex way, then one of the `stringr` package options might come in handy.



### `here::here()`

_TSV files, very neat... But also, I got a bit confused when you did the render process around 22:00-23:00 minutes. Also, "here: and also "here" Directories/root directories. I was a bit confused about in what situations we would tangibly utilize this/if it is beneficial._

* Great question! This is definitely not intuitive, which is why I wanted to demonstrate it in class. 
* The key is that 
    * when rendering a qmd file the current working directory is the folder the file is sitting in, 
    * while when running code in a file within RStudio the working directory is the folder where the `.Rproj` file is located.  
* This distinction is important when loading other files from our computer during our workflow, and why `here::here()` makes our workflow so much easier!


###  what functions will only work within another function (generally)

* I'm not aware of functions that only work standalone within other functions. For example, the `mean()` function works on its own, but can also be used within a `summarise()`.


```{r}
mean(penguins$bill_length_mm, na.rm = TRUE)

penguins %>% summarise(
  m = mean(bill_length_mm, na.rm = TRUE)
)
```

* That being said, a function has a set of parameters to be specified that are specific to that function. 





