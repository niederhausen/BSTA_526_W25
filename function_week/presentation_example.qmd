---
title: "dplyr::slice"
subtitle: "Function of the Week"
description: "Select rows of dataset using row number"
author: "Ted Laderas"
date: "1/13/2021"
format: 
  html:
    link-external-newwindow: true
    toc: true
    toc_float:
      collapsed: false
    number-sections: true
    number-depth: 4
    self-contained: true
    html-math-method: mathjax
execute:
  echo: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# `dplyr::slice()`

In this document, I will introduce the `slice()` function and show what it's for.

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(palmerpenguins)
data(penguins)
```

## What is it for?

Say you want the first 7 rows of a table. Well, `slice()` is an easy way to do that. The `slice()` function accepts two arguments: The first is the dataset, and the second is the `range` of values you want to extract.

```{r}
slice(penguins, 1:7)
```

`slice()` is much more helpful in a tidy workflow, so you can see the first few rows of the data when you're processing. This is really helpful when you're building up a pipeline and need to show intermediate output without showing the entire table.

```{r}
penguins %>%
  slice(1:7)
```

## Is it helpful?

Yes, when you need to just show part of a table as an example, `slice()` can come in handy. I don't use it everyday, but it can come in handy.

