---
title: "Week 7"
description: "Start with your goal: more data wrangling"
date: "2/21/2024"
date-modified: "today"
categories: [""]
format: 
  html:
    link-external-newwindow: true
    toc: true
editor_options: 
  chunk_output_type: console
---

## Announcements

* __HW 7 is in the part 6 folder__
* HW 6: see the updated HW 6 assignment on OneDrive in the `pat06` folder called `hw_06_b526-final-version.qmd`
* Midterm: due date extended to 2/25/24. 
    * See the updated midterm file on OneDrive with new yaml, due date, and links to previous midterm projects.

### Reminder to fill out post-class surveys

* This is a reminder that 5% of your grade is based on filling out [post-class surveys](https://ohsu.ca1.qualtrics.com/jfe/form/SV_5urkrdktEwkQqEu) as a way of telling us that you came to class and engaged with the material for that week.
* You only need to fill out 5 surveys (of the 10 class sessions) for the full 5%. We encourage you to fill out as many surveys as possible to provide feedback on the class though.
* __Please fill out surveys by 8 pm on Sunday evenings to guarantee that they will be counted.__ We usually download them some time on Sunday evening or Monday. If you turn it in before we download the responses, it will get counted. 

_See [syllabus section on Post-class surveys](https://niederhausen.github.io/BSTA_526_W24/syllabus.html#post-class-surveys)_



## Topics

### Part 6 

- **Practice** working with real data
- **Practice** joining and pivoting
- **Practice** ggplot and learn more geometries
- **Learn** how to deal with missing data


## Class materials

* [Week 6 Readings](../readings/06-reading.qmd)
* One Drive [part_06 Project folders](https://ohsuitg-my.sharepoint.com/:f:/g/personal/niederha_ohsu_edu/EvZ5qnesTopKqFWN2_hqEsYBLKZmJDjVxrPCbQOpvAIYSg?e=RDggRF)


## Post-class survey

* Please fill out the [post-class survey](https://ohsu.ca1.qualtrics.com/jfe/form/SV_5urkrdktEwkQqEu) to provide feedback. Thank you!


## Homework

* See OneDrive folder for homework assignment.
* HW 7 due on 2/28. __Assignment is in the part 6 folder.__


## Recording

* __In-class__ recording links are on [Sakai](https://sakai.ohsu.edu/portal/site/BSTA-526-1-AX-W24/tool/a973f2a2-ea06-4734-aab7-a066c5573ca6/ShowPage?returnView=&studentItemId=0&backPath=&bltiAppStores=false&errorMessage=&clearAttr=&messageId=&source=&title=&newTopLevel=false&sendingPage=190949&postedComment=false&addBefore=&itemId=5172228&path=push&topicId=&addTool=-1&recheck=&id=&forumId=). Navigate to _Course Materials_ -> _Schedule with links to in-class recordings_. Note that the password to the recordings is at the top of the page. 


# Muddiest points from Week 7

* Week 7 feedback will be added during Week 6.
* See Week 6 page for [Week 6 feedback](week_06.qmd#muddiest-points-from-week-6).



### Why we used `full_join()`

>Why we used `full_join()` in the class example instead of the other join options

* In this case both datasets being joined had the same ID's, and thus it did not matter whether we used `left_join()`, `right_join()`, `full_join()` or `inner_join()`. All of these would've given the same results. 

### Visualizing pivots and joins

>pivot-longer is still hard for me to mentally visualize how it alters the dataset.

>I always struggle to visualize pivots and joins. 

* Reshaping data take lots of practice to get the hang of, and something where I still pause while coding to think through how it will work and how to code it. Especially for pivoting, I often refer back to existing code I am familiar with. _It's normal at this point to still be muddy on these topics. Keep practicing though and read through some more examples._ 
* In the [week 6 muddiest points](https://niederhausen.github.io/BSTA_526_W24/weeks/week_06.html#trying-to-visualize-the-joins-and-pivot-longerwider) I listed some additional resources for visualizing these. 
* See also [Tidy Animated Verbs](https://github.com/gadenbuie/tidyexplain) for visualizing [joins](https://github.com/gadenbuie/tidyexplain?tab=readme-ov-file#mutating-joins) and [pivoting](https://github.com/gadenbuie/tidyexplain#tidy-data). The page  also includes visualizing `union()`, `intersect()`, and `set_diff()`. 
* Another great resource is the [R for Epidemiology](https://www.r4epi.com/) website. 
    * It has sections on [joins](https://www.r4epi.com/working-with-multiple-data-frames#combining-data-frames-horizontally-by-key-values) and [pivoting](https://www.r4epi.com/restructuring-data-frames#restructuring-data-frames).
* Jessica also addressed [pivoting in last year's muddiest points](https://sph-r-programming-2023.netlify.app/class/07-class/#muddiest-parts). 

_Please come to office hours or set up a time to meet if this is still muddy after looking at these resources!_

### `mutate(factor ( ))`

>`mutate(factor ( ))` problem we ran into in class where Emile posted on Slack.

Below is the code Emile posted on Slack (commented out):
```{r eval=FALSE}
# data <- data |>
#   mutate(timepoint = factor(timepoint,
#                             levels = c(1, 2, 3),
#                             labels = c(“1 month”,
#                                          “6 months”,
#                                          “12 months”)))
```

* At this point we were working through the code of Section 2.8 in the Part 6 notes. 

Load the `mouse_data` dataset we were working with:

```{r}
#| warning: false
#| message: false
 
library(tidyverse)
library(here)
library(janitor)

mouse_data <- read_csv(here("data", "mouse_data_longitudinal_clean.csv"))
glimpse(mouse_data)

mouse_data %>% tabyl(time)
```

* The goal was to create a factor variable of the character time point column called `time` with the levels 1 month, 6 months, and 12 months, instead of `time`'s values tp1, tp2, and tp3. 
* The code presented in class to accomplish this is below:

```{r}
# create time_month factor
mouse_data <- mouse_data %>%
  mutate(time_month = case_when(
    time=="tp1" ~ "1 month",
    time=="tp2" ~ "6 months",
    time=="tp3" ~ "12 months"
  ),
  time_month = factor(time_month,
                      levels = c("1 month", "6 months", "12 months")))
```

* Compare the old and new time variables:

```{r}
mouse_data %>% tabyl(time, time_month)
```

* The question arose as to whether we could include `factor()` in the same step as `case_when()` when creating `time_month` above, instead of having to write it out as a second separate line in the `mutate()`. 
* When using `case_when()`, we can do this as follows by piping the factor after the `case_when()`:

```{r}
mouse_data <- mouse_data %>%
  mutate(time_month2 = case_when(
    time=="tp1" ~ "1 month",
    time=="tp2" ~ "6 months",
    time=="tp3" ~ "12 months"
  ) %>% factor(., levels = c("1 month", "6 months", "12 months"))
  )

mouse_data %>% tabyl(time_month, time_month2)
```

* Another option that is similar, is to enclose the `case_when()` within the `factor()`:

```{r}
mouse_data <- mouse_data %>%
  mutate(time_month3 = factor(
    case_when(
      time=="tp1" ~ "1 month",
      time=="tp2" ~ "6 months",
      time=="tp3" ~ "12 months"
      ), 
    levels = c("1 month", "6 months", "12 months")
    ))

mouse_data %>% tabyl(time_month, time_month3)
```

#### `levels` vs. `labels`

* Emile suggested using `factor()` on the `time` variable directly, and creating the new values using the `labels` option within `factor()`:

```{r}
mouse_data <- mouse_data %>% 
  mutate(time_month4 = factor(time,
                             levels = c("tp1", "tp2", "tp3"),
                             labels = c("1 month", "6 months", "12 months")
                             ))

mouse_data %>% tabyl(time_month, time_month4)
```

* What is new her is that we have not previously discussed `labels`.
* You can think of the __`levels` as the input__ for the `factor()` function. 
    * It's how we specify what the different levels are for the variable we are converting to factor, as well as the __order we want the levels__ to be in.
    * If we do not specify the `levels`, then R will automatically use the different values of the variable being converted and arrange them in alphanumeric order. Example: 

```{r}
mouse_data <- mouse_data %>% 
  mutate(time_month5 = factor(time))

mouse_data %>% tabyl(time_month, time_month5)
```

* While `levels` is an input for the `factor()` function, __`labels` is an output__ for the `factor()` function.
* The values specified in `labels` are the new values for the levels:

```{r}
# time_month4 added labels
# time_month5 did not add labels

mouse_data %>% tabyl(time_month4, time_month5)

levels(mouse_data$time_month4)
levels(mouse_data$time_month5)
```

* Note that both `time_month4` and `time_month5` started with the same `levels`. 
* Instead of using the `labels` option within `factor()` (the base R way), we can also accomplish this by using `fct_recode()` from the `forcats` package (loaded as a part of `tidyverse`):

```{r}
# original tp levels:
levels(mouse_data$time_month5)

mouse_data <- mouse_data %>% 
  mutate(time_month6 = fct_recode(time_month5, 
                            # new_name = "old_name"
                                 "1 month" = "tp1", 
                                 "6 months" = "tp2", 
                                 "12 months" = "tp3"))

levels(mouse_data$time_month6)

mouse_data %>% tabyl(time_month6, time_month5)
```

* Learn more about `fct_recode()` [here](https://forcats.tidyverse.org/reference/fct_recode.html).



### `%in%`

>`%in%` command, I feel like I understand but have some confusion and think it might just be one of those things I have to work with/apply to fully understand 

* We've used the `%in%` function in some examples, but I don't think we've discussed it in detail.

* The %in% function is used to __test whether elements of one vector are contained in another vector__. It returns a logical vector indicating whether each element of the first vector is found in the second vector.

* Below are some examples that ChatGPT generated (and I slightly edited). 

```{r}
#| warning: false

# Example 1: Using %in% with two numeric vectors
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6)

x %in% y

# Example 2: Using %in% with two character vectors
fruits <- c("apple", "banana", "orange", "grape")
selected_fruits <- c("banana", "grape", "kiwi")

selected_fruits %in% fruits

# Example 3: Using %in% with dataframe columns
library(tidyverse)

# Create a dataframe
df <- tibble(
  ID = c(1, 2, 3, 4, 5),
  fruit = c("apple", "banana", "orange", "grape", "kiwi")
)

df

# Filter rows where 'fruit' column contains values from selected_fruits
selected_fruits <- c("banana", "grape", "kiwi")

df_filtered <- df %>%
  filter(fruit %in% selected_fruits)

df_filtered

```




## Clearest points

> This class was all really clear. It was helpful to be reviewing some of the things we learned last week.

> I appreciate the new codes on how to clean/reshape/combine messy data. I think that was the hardest parts to do in the other Biostatistics courses during projects.

> Data cleaning

> Most of the data cleaning exercises. 

> different strategies to clean data sets

> The data cleaning made a lot of sense but I think I will struggle with solving problems in a really inefficient way.

> Everything before Challenge 3

> methods to merge datasets to create a table

> inner join and full join are the same if all vectors are the same.

> Pivot 

> ggplot and how to code data in to display what we want to display 





## Other comments


> Is there a difference between summarize (with z) and summarise (with s)?

Great question! 

* In English, summarize is American English and summarise is British English. * In R they work the same way. The [reference page for `summarise()`](https://dplyr.tidyverse.org/reference/summarise.html) lists them as synonyms.
* In R code I see summarise more, and now keep mixing up which is American and which is British. 
* In general, R accepts both American and British English, such as both color and colour. 

> Thank you for the survey reminders! The pace of the class feels much better compared to the pace at the beginning of the term

Thanks for the feedback!


> I really enjoyed the walk through from start to finish of how to clean the data sheet and it really helped clear up many of the commands I was previously confused about 

Thanks for the feedback! Glad the data wrangling walk through was helpful. 